speech_test_main:
  actions:
    - type: send
      text: |
        üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
        
        ‚Ä¢ <code>/speech</code> —Ç–µ–∫—Å—Ç ‚Äî –±—ã—Å—Ç—Ä—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
        ‚Ä¢ <code>üé§ –¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏</code> ‚Äî –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é
        
        <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≥–æ–ª–æ—Å–∞:</b>
        üë® –ë–æ—Ä–∏—Å, üë© –ù–∞—Ç–∞–ª—å—è, üë® –¢–∞—Ä–∞—Å, üë© –ú–∞—Ä—Ñ–∞, üë® –°–µ—Ä–≥–µ–π, üá∫üá∏ Kira
        
        <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:</i>
      inline:
        - [{"üé§ –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å": "test_speech.speech_test_voice_selection"}]
        - [{"üîô –ú–µ–Ω—é": "start_menu"}]
      callback_edit: false

# –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /speech
speech_test_reply:
  actions:
    - type: send
      text: "üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏..."
      text_to_speech: "{reply_message_text}"
      placeholder: true
      callback_edit: false
      chain: true
    - type: scenario
      value: "speech_test_text_extraction"
    - type: scenario
      value: "speech_test_result"

# –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
speech_test_with_text:
  actions:
    - type: send
      text: "üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏..."
      text_to_speech: "{event_text|regex:(?<=/speech\\s).+}"
      placeholder: true
      callback_edit: false
    - type: send
      text: | 
        üìù –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞: <code>{text_to_speech}</code>
        –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: <code>{event_text}</code>
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: <code>{event_text|regex:(?<=/speech\\s).+}</code>
      callback_edit: false
      chain: true
    - type: scenario
      value: "speech_test_text_extraction"
    - type: scenario
      value: "speech_test_result"

speech_test_text_extraction:
  actions:
    - type: validator
      rules:
        text_to_speech:
          - rule: not_empty
          - rule: length_min
            value: 1
      placeholder: true
      chain: true
    - type: send
      text: |
        ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
      chain: failed
      chain_drop: completed
    - type: send
      text: "üìù –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞: {text_to_speech}"
      placeholder: true
      callback_edit: false
      chain: true
    - type: to_speech
      chain: true

speech_test_result:
  actions:
    - type: send
      text: |
        ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å
        –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: <code>{event_text}</code>
      chain: failed
      chain_drop: completed
    - type: send
      text: "‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –≥–æ—Ç–æ–≤!"
      attachment: "{file_path}"
      inline:
        - [{"üé§ –¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏": "test_speech.speech_test_voice_selection"}, {"üîô –ú–µ–Ω—é": "start_menu"}]
      placeholder: true
      callback_edit: false
      chain: true

# –°—Ü–µ–Ω–∞—Ä–∏–π —Å –≤—ã–±–æ—Ä–æ–º –≥–æ–ª–æ—Å–∞
speech_test_voice_selection:
  actions:
    - type: send
      text: "üé§ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:"
      inline:
        - [{"üë® –ë–æ—Ä–∏—Å": "test_speech.speech_boris"}, {"üë© –ù–∞—Ç–∞–ª—å—è": "test_speech.speech_natalia"}]
        - [{"üë® –¢–∞—Ä–∞—Å": "test_speech.speech_taras"}, {"üë© –ú–∞—Ä—Ñ–∞": "test_speech.speech_marfa"}]
        - [{"üë® –°–µ—Ä–≥–µ–π": "test_speech.speech_sergey"}, {"üá∫üá∏ Kira": "test_speech.speech_kira"}]
        - [{"üîô –ù–∞–∑–∞–¥": "test_speech"}]
      callback_edit: false

# –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
speech_boris:
  actions:
    - type: send
      text: "üé§ –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –≥–æ–ª–æ—Å–æ–º –ë–æ—Ä–∏—Å–∞..."
      callback_edit: false
    - type: to_speech
      text_to_speech: "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ä–∏—Å. –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏."
      voice: "Bys_24000"
      format: "opus"
      chain: completed
    - type: scenario
      value: "speech_test_result"

speech_natalia:
  actions:
    - type: send
      text: "üé§ –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –≥–æ–ª–æ—Å–æ–º –ù–∞—Ç–∞–ª—å–∏..."
      callback_edit: false
    - type: to_speech
      text_to_speech: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ù–∞—Ç–∞–ª—å—è. –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏."
      voice: "Nec_24000"
      format: "opus"
      chain: completed
    - type: scenario
      value: "speech_test_result"

speech_taras:
  actions:
    - type: send
      text: "üé§ –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –≥–æ–ª–æ—Å–æ–º –¢–∞—Ä–∞—Å–∞..."
      callback_edit: false
    - type: to_speech
      text_to_speech: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –¢–∞—Ä–∞—Å. –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏."
      voice: "Tur_24000"
      format: "opus"
      chain: completed
    - type: scenario
      value: "speech_test_result"

speech_marfa:
  actions:
    - type: send
      text: "üé§ –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –≥–æ–ª–æ—Å–æ–º –ú–∞—Ä—Ñ—ã..."
      callback_edit: false
    - type: to_speech
      text_to_speech: "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞—Ä—Ñ–∞. –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏."
      voice: "May_24000"
      format: "opus"
      chain: completed
    - type: scenario
      value: "speech_test_result"

speech_sergey:
  actions:
    - type: send
      text: "üé§ –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –≥–æ–ª–æ—Å–æ–º –°–µ—Ä–≥–µ—è..."
      callback_edit: false
    - type: to_speech
      text_to_speech: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –°–µ—Ä–≥–µ–π. –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏."
      voice: "Pon_24000"
      format: "opus"
      chain: completed
    - type: scenario
      value: "speech_test_result"

speech_kira:
  actions:
    - type: send
      text: "üé§ –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –≥–æ–ª–æ—Å–æ–º Kira (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)..."
      callback_edit: false
    - type: to_speech
      text_to_speech: "Hello! I'm Kira. This is a demonstration of high-quality English voice synthesis."
      voice: "Kin_24000"
      format: "opus"
      chain: completed
    - type: scenario
      value: "speech_test_result"